// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat-group.proto

package chatgroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Member struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_group_5c6807c82d30c897, []int{0}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (dst *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(dst, src)
}
func (m *Member) XXX_Size() int {
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Member) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Member) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type MemberList struct {
	Member               []*Member `protobuf:"bytes,1,rep,name=member" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MemberList) Reset()         { *m = MemberList{} }
func (m *MemberList) String() string { return proto.CompactTextString(m) }
func (*MemberList) ProtoMessage()    {}
func (*MemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_group_5c6807c82d30c897, []int{1}
}
func (m *MemberList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberList.Unmarshal(m, b)
}
func (m *MemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberList.Marshal(b, m, deterministic)
}
func (dst *MemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberList.Merge(dst, src)
}
func (m *MemberList) XXX_Size() int {
	return xxx_messageInfo_MemberList.Size(m)
}
func (m *MemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberList.DiscardUnknown(m)
}

var xxx_messageInfo_MemberList proto.InternalMessageInfo

func (m *MemberList) GetMember() []*Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type Message struct {
	Sender               *Member  `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_group_5c6807c82d30c897, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSender() *Member {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Member)(nil), "chatgroup.Member")
	proto.RegisterType((*MemberList)(nil), "chatgroup.MemberList")
	proto.RegisterType((*Message)(nil), "chatgroup.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherClient interface {
	Subscribe(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	Unsubscribe(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MemberList, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Subscribe(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/chatgroup.Publisher/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Unsubscribe(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/chatgroup.Publisher/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MemberList, error) {
	out := new(MemberList)
	err := c.cc.Invoke(ctx, "/chatgroup.Publisher/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
type PublisherServer interface {
	Subscribe(context.Context, *Member) (*Member, error)
	Unsubscribe(context.Context, *Member) (*Member, error)
	Publish(context.Context, *Message) (*MemberList, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgroup.Publisher/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Subscribe(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgroup.Publisher/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Unsubscribe(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgroup.Publisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatgroup.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Publisher_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Publisher_Unsubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat-group.proto",
}

// DisplayerClient is the client API for Displayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DisplayerClient interface {
	DisplayText(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	DisplaySubscription(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	DisplayUnsubscription(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
}

type displayerClient struct {
	cc *grpc.ClientConn
}

func NewDisplayerClient(cc *grpc.ClientConn) DisplayerClient {
	return &displayerClient{cc}
}

func (c *displayerClient) DisplayText(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chatgroup.Displayer/DisplayText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayerClient) DisplaySubscription(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/chatgroup.Displayer/DisplaySubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayerClient) DisplayUnsubscription(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/chatgroup.Displayer/DisplayUnsubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisplayerServer is the server API for Displayer service.
type DisplayerServer interface {
	DisplayText(context.Context, *Message) (*Message, error)
	DisplaySubscription(context.Context, *Member) (*Member, error)
	DisplayUnsubscription(context.Context, *Member) (*Member, error)
}

func RegisterDisplayerServer(s *grpc.Server, srv DisplayerServer) {
	s.RegisterService(&_Displayer_serviceDesc, srv)
}

func _Displayer_DisplayText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayerServer).DisplayText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgroup.Displayer/DisplayText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayerServer).DisplayText(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Displayer_DisplaySubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayerServer).DisplaySubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgroup.Displayer/DisplaySubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayerServer).DisplaySubscription(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Displayer_DisplayUnsubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayerServer).DisplayUnsubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgroup.Displayer/DisplayUnsubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayerServer).DisplayUnsubscription(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

var _Displayer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatgroup.Displayer",
	HandlerType: (*DisplayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisplayText",
			Handler:    _Displayer_DisplayText_Handler,
		},
		{
			MethodName: "DisplaySubscription",
			Handler:    _Displayer_DisplaySubscription_Handler,
		},
		{
			MethodName: "DisplayUnsubscription",
			Handler:    _Displayer_DisplayUnsubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat-group.proto",
}

func init() { proto.RegisterFile("chat-group.proto", fileDescriptor_chat_group_5c6807c82d30c897) }

var fileDescriptor_chat_group_5c6807c82d30c897 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0xa9, 0xa4, 0x64, 0x02, 0xa2, 0x23, 0x85, 0xd0, 0x53, 0xd9, 0x53, 0x3d, 0x98,
	0x43, 0x8a, 0xf6, 0x24, 0x7a, 0xf0, 0xe0, 0xc1, 0x82, 0x54, 0x7d, 0x80, 0xa4, 0x0e, 0xed, 0x42,
	0x93, 0x2c, 0xbb, 0x1b, 0xa8, 0x4f, 0xe5, 0x4b, 0xf8, 0x60, 0xb2, 0x9b, 0xa5, 0x20, 0xa9, 0xd0,
	0xde, 0x66, 0xfe, 0xfc, 0xdf, 0x3f, 0x33, 0x61, 0xe1, 0x62, 0xb5, 0x29, 0xcc, 0xcd, 0x5a, 0x35,
	0xad, 0xcc, 0xa4, 0x6a, 0x4c, 0x83, 0xb1, 0x55, 0x9c, 0xc0, 0x1f, 0x21, 0x5a, 0x50, 0x55, 0x92,
	0x42, 0x84, 0xb3, 0xba, 0xa8, 0x28, 0x65, 0x13, 0x36, 0x8d, 0x97, 0xae, 0xc6, 0x73, 0x08, 0x85,
	0x4c, 0x43, 0xa7, 0x84, 0x42, 0x5a, 0x8f, 0x6c, 0x94, 0x49, 0x07, 0x9d, 0xc7, 0xd6, 0x7c, 0x0e,
	0xd0, 0x25, 0xbc, 0x08, 0x6d, 0xf0, 0x1a, 0xa2, 0xca, 0x75, 0x29, 0x9b, 0x0c, 0xa6, 0x49, 0x7e,
	0x99, 0xed, 0x67, 0x65, 0x9d, 0x6d, 0xe9, 0x0d, 0xfc, 0x19, 0x86, 0x0b, 0xd2, 0xba, 0x58, 0x93,
	0xa5, 0x34, 0xd5, 0x9f, 0x8e, 0x62, 0xff, 0x50, 0x9d, 0xc1, 0xae, 0x60, 0x68, 0x67, 0xfc, 0x52,
	0xae, 0xce, 0xbf, 0x19, 0xc4, 0xaf, 0x6d, 0xb9, 0x15, 0x7a, 0x43, 0x0a, 0x67, 0x10, 0xbf, 0xb5,
	0xa5, 0x5e, 0x29, 0x51, 0x12, 0xf6, 0x93, 0xc6, 0x7d, 0x89, 0x07, 0x78, 0x0b, 0xc9, 0x47, 0xad,
	0x4f, 0xc6, 0xee, 0x60, 0xe8, 0x07, 0x23, 0xfe, 0xf9, 0xee, 0xee, 0x1a, 0x8f, 0x7a, 0x8c, 0xfd,
	0x49, 0x3c, 0xc8, 0x7f, 0x18, 0xc4, 0x4f, 0x42, 0xcb, 0x6d, 0xf1, 0x45, 0x0a, 0xe7, 0x90, 0xf8,
	0xe6, 0x9d, 0x76, 0xe6, 0x60, 0xd2, 0x01, 0x8d, 0x07, 0x78, 0x0f, 0x57, 0x1e, 0xf4, 0x17, 0x4b,
	0x23, 0x9a, 0xfa, 0xe8, 0xed, 0x1f, 0x60, 0xe4, 0xf1, 0xfd, 0xed, 0x27, 0x05, 0x94, 0x91, 0x7b,
	0x4f, 0xb3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x60, 0xe1, 0x89, 0x63, 0x02, 0x00, 0x00,
}
